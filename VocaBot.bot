import discord
import asyncio
import os
from random import randint
from discord.ext import commands
from datetime import datetime

statutpresence = ["you!", "cooked you!"]

#récupèrer toutes les variables globales
bottoken, prefix = "MTEwNDY5NzcwODMyMjc3MTA3NA.G6gLRg.P2xtOKDjBYQ9cMBJLCtCbc2KMn_Cj9CCkr92Ds", "BV"
#Bot
bot = client = commands.Bot(command_prefix = prefix,intents=discord.Intents.all(),description = "wait a minute plz")
bot.remove_command('help')

#start events
@bot.event
async def on_ready():
    startTime = datetime.strftime(datetime.now(), '%H:%M:%S')
    print(f'{startTime}|[START/info](/)|Logged in as {bot.user} (ID: {bot.user.id})')
    await bot.change_presence(status = discord.Status.online,activity = discord.Game("Chargement des cookis!"))
    try:
        synced = await bot.tree.sync()
        print(f'{startTime}|[START/info](/)|Synced {len(synced)} commands')
    except Exception as e:
        print(f"{startTime}|[START/failure](X)|an error has occurred:{e}")
        print(e)
    statut = randint(0,1)
    if statut == 1:
        actype = discord.ActivityType.playing
    else : actype = discord.ActivityType.watching
    statut = statutpresence[statut]
    await bot.change_presence(activity=discord.Activity(type = actype, name = statut))
    print("")

#ping
@bot.command()
async def ping(ctx):
    embed=discord.Embed(title="PONG", description=f":ping_pong: The ping is **{round(client.latency *100)}** milliseconds!")
    await ctx.send(embed=embed)

#shutdown commande
@bot.command()
@commands.has_permissions(administrator=True)
async def off(ctx):
    startTime = datetime.strftime(datetime.now(), '%H:%M:%S')
    await ctx.send("Bot was offline.")
    print("")
    print(f"{startTime}|[STOP/info](/)|Bot Closed")
    print("")
    await bot.close()

@bot.command()
@commands.has_permissions(administrator=True)
async def restart(ctx):
    startTime = datetime.strftime(datetime.now(), '%H:%M:%S')
    await ctx.send("Bot was offline for restart.")
    await asyncio.sleep(1)
    print("")
    print(f"{startTime}|[STOP/info](/)|Bot Closed for restart")
    print("")
    restart = open("Luncher.dll", "w")
    restart.write(f"VocaBot, y")
    restart.close()
    await bot.close()

#say commande
@bot.command()
async def sayInChannel(ctx, channel : discord.TextChannel, text):
    await channel.send(text)
    MTD2 = await ctx.channel.send(f"Votre message a bien été envoyé dans #{channel}!")
    MTD1 = ctx.message
    await asyncio.sleep(4)
    await MTD1.delete()
    await MTD2.delete()

@bot.command()
async def say(ctx,*, text):
    messagetodelete = ctx.message
    await messagetodelete.delete()
    await ctx.send(text)
    channel= ctx.channel

#afficher un avatar
@bot.command()
async def avatar(ctx, member:discord.Member):
	try : 
		embed = discord.Embed(title = f"Voici l'avatar de {member} :",color = discord.Colour.blue())
		embed.set_image(url = member.avatar)
		await ctx.send(embed=embed)
		await ctx.message.delete()
	except Exception as errors:
		await ctx.send(embed= discord.Embed(title = ":x: Une erreur a eu lieu.", description = f"L'erreur est la suivante : `{errors}`."))

#randome générator
@bot.command()
async def rdm(ctx, min,*, max):
    if int(max) > int(min):
        num = randint(int(min), int(max))
    else: num = randint(int(max), int(min))
    embed = discord.Embed(title = "Random", description = f"Voici un nombre aléatoir entre {min} et {max}")
    embed.set_thumbnail(url = "https://media.tenor.com/IfbgWLbg_88AAAAC/dice.gif")
    embed.add_field(name="Nombre:", value= num, inline= False)
    await ctx.send(embed=embed)

#slash command voca
@bot.tree.command(name = "voca")
async def TestVoca(interaction: discord.Interaction, lang: str, nombre: int):
    q = {}
    r = {}
    try:
        with open(f"{lang}.dtb", "r", encoding="utf-8") as voca:
            entete = voca.readline()
            mots = 0
            for ligne in voca:
                trad, quest = ligne.strip().split(",")
                mots += 1
                q[mots] = quest
                r[mots] = trad
        if mots == 0:
            await interaction.response.send_message(f"Aucun mot trouvé dans le test de {lang}.", ephemeral=True)
        else:
            embed = discord.Embed(title = f"Teste de vocabulaire {lang}", description = f"{mots} mots ressancés", color=discord.Colour.blue())
            embed.set_thumbnail(url = "https://cdn3.emoji.gg/emojis/1041-zenitsu-yelena.png")
            if int(nombre) > mots:
                nombre = mots
                embed.add_field(name="**Erreur:**", value=f"**Le nombre de questions demandé est supèrieur au nombre de mots ressancés, vous n'aurez donc que {mots} questions.**", inline=False)
            embed.add_field(name = "Règeles:", value =  
                    f"""
                    Bienvenue {interaction.user.mention} sur le teste de vocabulaire d'{lang}.
                    Vous avez demandez un test de **{nombre} mots**.

                    Nous alons vous demander une à une les traduction de {nombre} mots pris au hazard dans une base de donnée de {mots} mots, pour y répondre veuillez envoyer votre réponse dans ce channel.
                    Après chaque réponse un microbilant vous est fournie, à la fin de la séssion d'entrainement un bilan complet vous serra remit.
                    En cas d'écheque ou d'erreure de la comande veuillez contacter un administrateur.
                    La vérification ignore les articles mais prend en compte les majuscules.

                    **IMPORTANT! Les eszetts (ß) serrons remplassé par "ss"**.
                    """
                    , inline = True)
            await interaction.channel.send(embed=embed)
            j, f, total = 0, 0, 0
            faut = []
            checked = []
            for i in range(int(nombre)):
                nbr = randint(1, mots)
                while nbr in checked:
                    nbr = randint(1, mots)
                checked.append(nbr)
                question = q[nbr]
                reponse = r[nbr]
                total = total + 1
                embed = discord.Embed(title = "Quelle est la traduction de", description = f"**{question}**", color=discord.Colour.dark_theme())
                embed.set_footer(text = f"Question: {total}/{nombre}")
                await interaction.channel.send(embed=embed)
                def checkMessage(message):
                    return interaction.user == message.author and interaction.channel == message.channel
                rep = await bot.wait_for("message", check = checkMessage)
                if rep.content in reponse:
                    j, titre, color, url = j + 1, "Juste", discord.Colour.green(), "https://cdn3.emoji.gg/emojis/2990_yes.png"
                else:
                    faut.append(nbr)
                    f, titre, color, url = f + 1, "Faut", discord.Colour.red(), "https://cdn3.emoji.gg/emojis/1465-x.png"
                reu = j * 100 /total
                embed = discord.Embed(title = titre, description = 
                            f"""
                            La réponse est **{reponse}**
                            {int(reu)}% de réussite.
                            """, color=color)
                embed.set_thumbnail(url = url)
                await interaction.channel.send(embed=embed)
            note = j*20/total
            note = round(note, 1)
            reu = round(reu, 2)
            embed = discord.Embed(title = "Résultats", description = f"**{note}/20**", color=discord.Colour.from_rgb(255, 255, 255))
            embed.set_thumbnail(url = "https://cdn3.emoji.gg/emojis/3323-guilty.png")
            embed.add_field(name = "Remarque", value = 
                    f"""
                    Bravos, vous avez finit le test de vocabulaire!
                    Vous avez répondu juste à **{j}/{total}** questions.
                    Votre note est de **{note}/20**, soit **{reu}%** de réussite.
                    """
                    , inline = True)
            await interaction.channel.send(embed=embed)
            if len(faut) != 0:
                embed = discord.Embed(title="Révision", description="Liste de mots à réviser.", color=discord.Colour.blue())
                for nbr in faut:
                    embed.add_field(name=f"{r[nbr]}", value=q[nbr], inline=False)
                await interaction.channel.send(embed=embed)
    except FileNotFoundError:
        await interaction.response.send_message(f"Le test de {lang} n'existe pas.", ephemeral=True)

#commande error
@bot.event
async def on_command_error(ctx, error):
    startTime = datetime.strftime(datetime.now(), '%H:%M:%S')
    print(f"{startTime}|[WARM/run](X)|Command error:{error}")
    await ctx.send(embed = discord.Embed(title ="Erreur",description = error, color = discord.Colour.red()))

bot.run(bottoken)

os.system("python Luncher.exe")